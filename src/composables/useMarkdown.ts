import MarkdownIt from 'markdown-it'
import type { BuildReportResponse, StoryInfo } from '@/types'

export function useMarkdown() {
  const md = new MarkdownIt({
    html: true,
    linkify: true,
    typographer: true,
    breaks: true
  })
  
  /**
   * Generate markdown content from report data
   */
  const generateMarkdown = (report: BuildReportResponse): string => {
    const lines: string[] = []
    
    // Header
    lines.push(`# Changelog Report: ${report.releaseBranch}`)
    lines.push('')
    lines.push(`**Date Range:** ${formatDate(report.from)} - ${formatDate(report.to)}`)
    lines.push(`**Generated:** ${formatDate(report.generatedAt)}`)
    lines.push('')
    
    // Summary
    lines.push('## Summary')
    lines.push('')
    lines.push(`- **Total Stories:** ${report.summary.totalStories}`)
    lines.push('')
    
    // Repository breakdown
    lines.push('### Repository Breakdown')
    lines.push('')
    Object.entries(report.summary.repoBreakdown).forEach(([repo, count]) => {
      lines.push(`- **${repo}:** ${count} ${count === 1 ? 'story' : 'stories'}`)
    })
    lines.push('')
    
    
    // Stories by repository
    lines.push('## Stories by Repository')
    lines.push('')
    
    const storiesByRepo = groupStoriesByRepo(report.stories)
    
    Object.entries(storiesByRepo).forEach(([repoKey, stories]) => {
      lines.push(`### ${repoKey}`)
      lines.push('')
      
      stories.forEach(story => {
        const storyLines = generateStoryMarkdown(story).split('\n')
        lines.push(`- ${storyLines[0]}`) // First line with bullet point
        // Add subsequent lines with proper indentation
        for (let i = 1; i < storyLines.length; i++) {
          lines.push(storyLines[i])
        }
      })
      lines.push('')
    })
    
    // Footer
    lines.push('---')
    lines.push('')
    lines.push('*This is an automated report generated by the MBSS Changelog Builder.*')
    
    return lines.join('\n')
  }
  
  /**
   * Render markdown to HTML
   */
  const renderMarkdown = (markdown: string): string => {
    return md.render(markdown)
  }
  
  /**
   * Generate complete HTML report with styling
   */
  const generateHtmlReport = (report: BuildReportResponse): string => {
    const markdown = generateMarkdown(report)
    const html = renderMarkdown(markdown)
    
    return `
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Changelog Report: ${report.releaseBranch}</title>
    <style>
        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', sans-serif;
            line-height: 1.6;
            max-width: 800px;
            margin: 0 auto;
            padding: 20px;
            color: #333;
        }
        h1, h2, h3 { color: #2c3e50; }
        h1 { border-bottom: 2px solid #3498db; padding-bottom: 10px; }
        h2 { border-bottom: 1px solid #bdc3c7; padding-bottom: 5px; margin-top: 30px; }
        h3 { margin-top: 25px; color: #34495e; }
        table {
            border-collapse: collapse;
            width: 100%;
            margin: 15px 0;
        }
        th, td {
            border: 1px solid #ddd;
            padding: 12px;
            text-align: left;
        }
        th {
            background-color: #f8f9fa;
            font-weight: 600;
        }
        tr:nth-child(even) {
            background-color: #f8f9fa;
        }
        a {
            color: #3498db;
            text-decoration: none;
        }
        a:hover {
            text-decoration: underline;
        }
        .story-block {
            border-left: 4px solid #3498db;
            padding-left: 15px;
            margin: 15px 0;
            background-color: #f8f9fa;
            padding: 15px;
            border-radius: 4px;
        }
        .epic-link {
            color: #8e44ad;
            font-style: italic;
        }
        code {
            background-color: #f1f2f6;
            padding: 2px 4px;
            border-radius: 3px;
            font-family: 'Monaco', 'Consolas', monospace;
        }
        hr {
            border: none;
            border-top: 1px solid #bdc3c7;
            margin: 30px 0;
        }
    </style>
</head>
<body>
    ${html}
</body>
</html>
    `.trim()
  }
  
  /**
   * Generate story markdown as a multi-line item
   */
  const generateStoryMarkdown = (story: StoryInfo): string => {
    const lines: string[] = []
    
    // Main story line with icon
    lines.push(`ðŸ“‹ [${story.issue.key}](${story.issue.url}) - ${story.issue.summary}`)
    
    // Epic information on second line (smaller font)
    if (story.issue.relatedEpics.length > 0) {
      const epicLinks = story.issue.relatedEpics.map(epic => 
        epic.url ? `[${epic.key}](${epic.url})` : epic.key
      ).join(', ')
      lines.push(`&nbsp;&nbsp;&nbsp;&nbsp;<small>Epic: ${epicLinks}</small>`)
    }
    
    // Assignee information on third line (smaller font)
    const assignee = story.issue.assignee || 'Unassigned'
    lines.push(`&nbsp;&nbsp;&nbsp;&nbsp;<small>Assignee: ${assignee}</small>`)
    
    return lines.join('\n')
  }
  
  /**
   * Group stories by repository
   */
  const groupStoriesByRepo = (stories: StoryInfo[]): Record<string, StoryInfo[]> => {
    return stories.reduce((acc, story) => {
      const repoKey = `${story.repo.projectKey}/${story.repo.slug}`
      if (!acc[repoKey]) {
        acc[repoKey] = []
      }
      acc[repoKey].push(story)
      return acc
    }, {} as Record<string, StoryInfo[]>)
  }
  
  /**
   * Format date string for display
   */
  const formatDate = (dateString: string): string => {
    try {
      const date = new Date(dateString)
      return date.toLocaleDateString('en-US', {
        year: 'numeric',
        month: 'short',
        day: 'numeric',
        hour: '2-digit',
        minute: '2-digit',
        timeZoneName: 'short'
      })
    } catch {
      return dateString
    }
  }
  
  return {
    generateMarkdown,
    renderMarkdown,
    generateHtmlReport,
    generateStoryMarkdown,
    groupStoriesByRepo,
    formatDate
  }
}
